import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const chatGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const codeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig: chatGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "create a todo app : You are a AI Assistant and experience in React Development.\n  GUIDELINES:\n  - Tell user what your are building\n  - response less than 15 lines. \n  - Skip code examples and commentary",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: "Okay, I will create a React-based Todo application for you. It will include features to add, mark complete, edit, and delete tasks. The app will use Tailwind CSS for styling, lucide-react icons where needed, and will use date-fns for date formatting and react-chartjs-2 for charts. The app will have a fully featured user interface and avoid third-party libraries. The UI will be professional and functional. The app will also display the total amount of tasks, and also a chart of tasks completed and pending and sort the task.\n",
        },
      ],
    },
  ],
});

export const codeSession = model.startChat({
  generationConfig: codeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Create a todo app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: "```json\n{\n  \"projectTitle\": \"React Todo App\",\n  \"explanation\": \"This React project implements a simple Todo application with features for creating, marking as complete, editing, and deleting todos. It utilizes functional components, React hooks, Tailwind CSS for styling, and icons from the lucide-react library. The app is structured with components for adding tasks, displaying task lists, and handling individual task items, and uses date-fns library for formatting dates. It avoids unnecessary third-party dependencies and provides a user-friendly interface. It will also show the total amount of tasks and show a chart of tasks done and not done. Also, there's also an option for sorting the tasks by date.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList.js';\\nimport AddTask from './components/AddTask.js';\\nimport { format } from 'date-fns';\\nimport Chart from './components/Chart.js';\\n\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n  const [sortOption, setSortOption] = useState('date');\\n\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n\\n  const addTask = (newTask) => {\\n      setTasks([...tasks, {...newTask, id: Date.now(), completed:false , createdDate: new Date().toISOString() } ]);\\n\\n  };\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? {...task, completed: !task.completed} : task));\\n  };\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n  const editTask = (id, updatedTask) => {\\n    setTasks(tasks.map(task => task.id === id ? {...task, ...updatedTask} : task));\\n  };\\n\\n  const sortedTasks = [...tasks].sort((a, b) => {\\n    if (sortOption === 'date') {\\n      return new Date(b.createdDate) - new Date(a.createdDate);\\n    } else if (sortOption === 'completed') {\\n      return (a.completed === b.completed) ? 0 : a.completed ? 1 : -1;\\n    }\\n    return 0;\\n  });\\n\\n  const totalTasks = tasks.length;\\n  const completedTasks = tasks.filter(task => task.completed).length;\\n  const pendingTasks = totalTasks - completedTasks;\\n\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen p-6 flex flex-col items-center\\\">\\n      <h1 className=\\\"text-3xl font-bold text-gray-800 mb-6\\\">üìù Todo App</h1>\\n      <div className=\\\"w-full max-w-3xl bg-white shadow-md rounded-lg p-6 space-y-6\\\">\\n      <AddTask onAddTask={addTask} />\\n        <div className='flex justify-between items-center mb-4'>\\n          <h2 className='text-xl font-semibold text-gray-700'>Task List</h2>\\n          <select\\n            className='border p-2 rounded text-sm'\\n            value={sortOption}\\n            onChange={(e) => setSortOption(e.target.value)}\\n          >\\n              <option value=\\\"date\\\">Sort By Date</option>\\n              <option value=\\\"completed\\\">Sort By Completed</option>\\n          </select>\\n        </div>\\n        <TaskList tasks={sortedTasks} onToggleComplete={toggleComplete} onDeleteTask={deleteTask} onEditTask={editTask} />\\n        <div className='mt-4 text-gray-600'>\\n            <p>Total Tasks: {totalTasks}</p>\\n            <p>Completed Tasks: {completedTasks}</p>\\n            <p>Pending Tasks: {pendingTasks}</p>\\n        </div>\\n        <Chart completedTasks={completedTasks} pendingTasks={pendingTasks}/>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/AddTask.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction AddTask({ onAddTask }) {\\n  const [taskName, setTaskName] = useState('');\\n  const [taskDescription, setTaskDescription] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskName.trim()) {\\n      onAddTask({name: taskName.trim(), description:taskDescription.trim() });\\n      setTaskName('');\\n      setTaskDescription('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex space-x-2\\\">\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Add Task Name\\\"\\n        value={taskName}\\n        onChange={(e) => setTaskName(e.target.value)}\\n        className=\\\"flex-1 p-2 border rounded text-gray-700 focus:ring focus:ring-blue-200\\\"\\n      />\\n    <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Add Task Description\\\"\\n        value={taskDescription}\\n        onChange={(e) => setTaskDescription(e.target.value)}\\n        className=\\\"flex-1 p-2 border rounded text-gray-700 focus:ring focus:ring-blue-200\\\"\\n      />\\n      <button type=\\\"submit\\\" className=\\\"bg-blue-500 text-white rounded p-2 hover:bg-blue-600 focus:ring focus:ring-blue-200\\\">\\n        <Plus className='w-5 h-5'/>\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default AddTask;\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskItem from './TaskItem';\\n\\nfunction TaskList({ tasks, onToggleComplete, onDeleteTask, onEditTask }) {\\n  if (tasks.length === 0) {\\n      return <p className='text-gray-500 text-center'>No tasks yet! Add some.</p>\\n  }\\n  return (\\n    <ul className=\\\"space-y-3\\\">\\n      {tasks.map((task) => (\\n        <TaskItem\\n          key={task.id}\\n          task={task}\\n          onToggleComplete={onToggleComplete}\\n          onDeleteTask={onDeleteTask}\\n          onEditTask={onEditTask}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;\\n\"\n    },\n    \"/components/TaskItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskItem({ task, onToggleComplete, onDeleteTask, onEditTask }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedName, setEditedName] = useState(task.name);\\n  const [editedDescription, setEditedDescription] = useState(task.description);\\n\\n  const handleEdit = () => {\\n      setIsEditing(true);\\n  };\\n\\n  const handleSave = () => {\\n    if (editedName.trim()) {\\n      onEditTask(task.id, { name: editedName, description: editedDescription });\\n      setIsEditing(false);\\n    }\\n  };\\n\\n  const handleCancel = () => {\\n      setIsEditing(false);\\n      setEditedName(task.name);\\n      setEditedDescription(task.description)\\n  };\\n  const formattedDate = format(new Date(task.createdDate), 'MMM dd, yyyy hh:mm a');\\n\\n  return (\\n    <li className=\\\"bg-gray-50 rounded p-3 shadow flex items-center justify-between\\\">\\n    \\n    <div className='flex items-center space-x-2'>\\n      <button\\n        onClick={() => onToggleComplete(task.id)}\\n        className={`rounded-full w-5 h-5 border border-gray-400 flex items-center justify-center  ${task.completed ? 'bg-green-500 text-white' : ''}`}>\\n        {task.completed && <Check className='w-4 h-4' />}\\n      </button>\\n        {isEditing ? (\\n          <div className='space-y-2'>\\n          <input\\n            type=\\\"text\\\"\\n            value={editedName}\\n            onChange={(e) => setEditedName(e.target.value)}\\n            className=\\\"border p-1 rounded focus:ring focus:ring-blue-200\\\"\\n          />\\n          <input\\n          type=\\\"text\\\"\\n          value={editedDescription}\\n          onChange={(e) => setEditedDescription(e.target.value)}\\n          className=\\\"border p-1 rounded focus:ring focus:ring-blue-200\\\"\\n        />\\n        <div className='flex space-x-2'>\\n         <button onClick={handleSave} className='text-green-500 hover:text-green-700'><Check className='w-4 h-4'/></button>\\n          <button onClick={handleCancel} className='text-red-500 hover:text-red-700'><X className='w-4 h-4'/></button>\\n         </div>\\n       </div>\\n        ) : (\\n          <div >\\n             <h3 className={`font-semibold ${task.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>{task.name}</h3>\\n             <p className={`text-sm text-gray-600 ${task.completed ? 'line-through' : ''}`}>{task.description}</p>\\n               <p className='text-xs text-gray-400'>Created at: {formattedDate}</p>\\n          </div>\\n        )}\\n    </div>\\n        <div className='flex space-x-2'>\\n          {!isEditing &&   <button onClick={handleEdit} className='text-blue-500 hover:text-blue-700'><Edit className='w-4 h-4'/></button>}\\n\\n          <button onClick={() => onDeleteTask(task.id)} className='text-red-500 hover:text-red-700'><Trash className='w-4 h-4'/></button>\\n        </div>\\n    </li>\\n  );\\n}\\n\\nexport default TaskItem;\\n\"\n    },\n     \"/components/Chart.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nconst Chart = ({ completedTasks, pendingTasks }) => {\\n    const data = {\\n        labels: ['Completed', 'Pending'],\\n        datasets: [\\n          {\\n            label: 'Task Status',\\n            data: [completedTasks, pendingTasks],\\n            backgroundColor: [\\n              'rgba(75, 192, 192, 0.8)',\\n              'rgba(255, 99, 132, 0.8)',\\n            ],\\n            borderColor: [\\n              'rgba(75, 192, 192, 1)',\\n              'rgba(255, 99, 132, 1)',\\n            ],\\n            borderWidth: 1,\\n          },\\n        ],\\n      };\\n\\n    return (\\n        <div style={{width:'300px', margin: '0 auto'}}>\\n        <Pie data={data} />\\n      </div>\\n    );\\n}\\n\\nexport default Chart;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/AddTask.js\",\n    \"/components/TaskList.js\",\n     \"/components/TaskItem.js\",\n     \"/components/Chart.js\"\n  ]\n}\n```\n",
        },
      ],
    },
  ],
});
